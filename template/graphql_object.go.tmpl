package {{.graphqlPackageName}}

import (
 "{{.modelFQPN}}"
 "github.com/graphql-go/graphql"
 "gorm.io/gorm"
 "github.com/carlosstrand/graphql-pagination-go"
)
{{- $singularTableName := singular .TableName}}
var {{toLowerCamelCase .StructName}} = graphql.NewObject(
 graphql.ObjectConfig{
  Name: "{{$singularTableName}}",
  Fields: graphql.Fields{
   {{range .TableInfo.CodeFields}}
   "{{.ColumnMeta.Name}}":        &graphql.Field{Type: graphql.{{.GraphqlFieldType}}},
   {{end}}
  },
  Description: "{{.TableName}} data",
 },
)

func {{toUpperCamelCase $singularTableName}}Type() (*graphql.Object) {
  return {{toLowerCamelCase .StructName}}
}

func New{{.StructName}}(db *gorm.DB) *graphql.Field {
 field := pagination.Paginated(&pagination.PaginatedField{
  Name: "{{.StructName}}",
  Type: {{toLowerCamelCase .StructName}},
  DataResolve: func(p graphql.ResolveParams, page pagination.Page) (i interface{}, e error) {
   var u []*model.{{.StructName}}
   if err := db.Limit(page.Limit).Offset(page.Skip).Find(&u).Error; err != nil {
    // do something
   }

   return u, nil
  },
  CountResolve: func(p graphql.ResolveParams, page pagination.Page) (i interface{}, e error) {
   var count int64
   result := db.Model(&model.Policies{}).Count(&count)

   if (result.Error != nil) {

   }
   return int(count), nil
  },
  Description: "{{.StructName}}",
 })

 return field
}